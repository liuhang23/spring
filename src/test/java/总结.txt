一.项目搭建
1、导入spring的dist中的jar包和commons-logging包
2、在src目录下创建相应的beans.xml
3、为beans.xml添加相应的schema
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
</beans>
4、新建一个类
5、在beans.xml中创建对象
    <!-- 
    创建如下bean等于完成了:HelloWorld helloWorld = new HelloWorld
     -->
	<bean id="helloWorld" class="org.zttc.itat.spring.model.HelloWorld"/>
6、在测试类中使用这个对象
  6.1、创建Spring的工厂
 	 private BeanFactory factory = new ClassPathXmlApplicationContext("beans.xml");
  6.2、通过Spring工厂获取相应的对象
    //此处getBean中的helloWorld就是beans.xml配置文件中的id
	HelloWorld hello = factory.getBean("helloWorld",HelloWorld.class);
	//此时的hello对象就是被Spring说管理的对象
	System.out.println(hello.hello());

二.知识点
反转控制(Inversion of control) ioc  
依赖注入(dependency Injection)
1、将所有的类在beans.xml中创建
   属性：通过<property />元素配置
 <property name="aaa" value="aval">  
   
      构造器参数<constructor-arg  /> 
     
2、对有依赖的类完成注入
  2.1、为每一个依赖类创建相应的getter和setter方法
  
 3.bean实例的属性指定值：各种数据类型，java实例  value,ref，bean,list,set,map.props
 	3.1设置普通属性值<property name="integer"  value="1"  />
	 3.2设置合作者Bean<property name="axe" ref="steelAxe">ref对应bean的id
  	3.3自动装配：减少配置文件工作量，但降低依赖关系的透明性和清晰性  autowire ="byName"
    autowire="byName"（常用）  根据name来完成   byType 根据类型完成注入
  
  三.动态代理  ：通过一个代理对象来创建需要的业务对象，然后再这个代理对象中统一进行各种需求的处理
       1.写一个类实现相应的InvocationHandler接口
       2.创建要代理的对象
  
  
  
  
  
  
  